"""

  conversion.py
  
  Unit Conversion
  Dave Bailey
  4/10/2011
 
  The conversion.py module uses Decimal from the decimal module as the base class
  decimal is based on the General Decimal Arithmetic Specification
  IEEE standard 854-1987
  conversion provides:
     exact decimal representation
     control over precision,
     control over rounding to meet legal or regulatory requirements,
     tracking of significant decimal places
     results match calculations done by hand. 

Conversions:
    Distance
    Area
    Volumn
    Time
    Velocity
    Acceleration
    Mass
    Force
    Weight
    Pressure
    Frequency
    Power
    Temperature

-- Examples:
>>> d = Distance(0.0)
>>> d.mi = 1.0
>>> print 'ft -> mile %.3f, %f, %s, %r' % (d.ft,d.ft,d.ft,d.ft)
ft -> mile 5280.000, 5280.000000, 5280.000000000000000000000000, Decimal('5280.000000000000000000000000')
>>> getcontext().prec = 28
>>> d = Distance(0.0)
>>> d.mi = 1.0
>>> print 'ft -> mile %.3f, %f, %s, %r' % (d.ft,d.ft,d.ft,d.ft)
ft -> mile 5280.000, 5280.000000, 5280.000000000000000000000000, Decimal('5280.000000000000000000000000')

>>> getcontext().prec = 52
>>> d = Distance(0.0)
>>> d.mi = 1.0
>>> print 'ft -> mile %.3f, %f, %s, %r' % (d.ft,d.ft,d.ft,d.ft)
ft -> mile 5280.000, 5280.000000, 5279.999999999999999999999999588007935999999954845670, Decimal('5279.999999999999999999999999588007935999999954845670')

>>> getcontext().prec = 28
>>> with localcontext() as ctx:
...     getcontext().prec = 52
...     d = Distance(0.0)
...     d.mi = 1.0
...     print 'ft -> mile %.3f, %f, %s, %r' % (d.ft,d.ft,d.ft,d.ft)
ft -> mile 5280.000, 5280.000000, 5279.999999999999999999999999588007935999999954845670, Decimal('5279.999999999999999999999999588007935999999954845670')

>>> getcontext().prec
28
>>> d.ft
Decimal('5280.000000000000000000000000')

>>> d0 = Distance('.10')
>>> d = Distance(d0+d0+d0-Decimal('.30'))
>>> '%r' % d.m
"Decimal('0.00')"

>>> d = Distance(.10 + .10 + .10 - .30)
>>> '%r' % d.m
"Decimal('5.5511151231257827021181583404541015625E-17')"

>>> d.m = '1.0'
>>> d.ft
Decimal('3.28083989501312300000')
>>> d.inch
Decimal('39.370078740157476000000')
>>> d.m = 1.0
>>> d.ft
Decimal('3.2808398950131230000')
>>> d.inch
Decimal('39.37007874015747600000')
>>> print d
1 meters (m)
0.000621371 miles (mi)
1.09361 yard (yd)
3.28084 feet (ft)
39.3701 inch (inch)
0.001 kilometers (km)
100 centimeters (cm)
1000 millimeters (mm)
1e+09 nanometer (nm)
>>> d
Decimal('1') meters (m)
Decimal('0.0006213711922373339015151515152') miles (mi)
Decimal('1.093613298337707666666666667') yard (yd)
Decimal('3.2808398950131230000') feet (ft)
Decimal('39.37007874015747600000') inch (inch)
Decimal('0.0010') kilometers (km)
Decimal('1.0E+2') centimeters (cm)
Decimal('1.0E+3') millimeters (mm)
Decimal('1.0E+9') nanometer (nm)

# distance = vt+.5at**2
>>> v = Velocity(49.0332501432)
>>> a = Acceleration(-9.80665002864) # gravity
>>> t = Time(0.0)
>>> print 'initial velocity = %f mps = %f fps' % (v.mps,v.fps)
initial velocity = 49.033250 mps = 160.870243 fps
>>> for sec in range(20):
...     t.sec = sec
...     d = v*t + Decimal(.5)*a*t**2
...     height = Distance(d)
...     if height < 0: break
...     print 't',t.sec,'height',height.m,'m',height.ft,'ft'
t 0 height 0E-47 m 0E-66 ft
t 1 height 44.12992512888000007365008059 m 144.7832189267716379167004149 ft
t 2 height 78.45320022912000013093347661 m 257.3923892031495785185785154 ft
t 3 height 102.9698253007200001718501880 m 337.8275108291338218056343013 ft
t 4 height 117.6798003436800001964002149 m 386.0885838047243677778677731 ft
t 5 height 122.5831253580000002045835572 m 402.1756081299212164352789303 ft
t 6 height 117.6798003436800001964002149 m 386.0885838047243677778677731 ft
t 7 height 102.9698253007200001718501881 m 337.8275108291338218056343016 ft
t 8 height 78.4532002291200001309334767 m 257.3923892031495785185785157 ft
t 9 height 44.1299251288800000736500806 m 144.7832189267716379167004149 ft
t 10 height 0E-25 m 0E-44 ft

from decimal import *


"""

from decimal import *

GRAVITY = Decimal('9.80665002864') # m/s2
FT_IN_MI = Decimal('5280.0')
FT_IN_M = Decimal('3.2808398950131230000') 
FT_IN_YD = Decimal('3.0')
INCH_IN_FT = Decimal('12.0')

MI_IN_M = FT_IN_M / FT_IN_MI
YD_IN_M = FT_IN_M / FT_IN_YD
INCH_IN_M = FT_IN_M * INCH_IN_FT
KM_IN_M = Decimal('1.0e-3')
CM_IN_M = Decimal('1.0e2')
MM_IN_M = Decimal('1.0e3')
NM_IN_M = Decimal('1.0e9')

SEC_IN_MIN = Decimal('60.0')
MIN_IN_HR = Decimal('60.0')
DAY_IN_WK = Decimal('7.0')
HR_IN_DAY = Decimal('24.0')
DAY_IN_YR = Decimal('365.24218967')

HR_IN_SEC = Decimal('1.0')/(SEC_IN_MIN * MIN_IN_HR)

G_IN_KG = Decimal('1.0e3')
LB_IN_NEWTON = Decimal('.224808942911188')
OZ_IN_G = Decimal('0.0352739619000')
OZ_IN_LB = Decimal('16.0')
W_IN_HP = Decimal('745.699872')

class Distance(Decimal):
    __slots__ = ("_update",) # generate AttributeError on illegal property; example: if d.yds instead of d.ydgenerate AttributeError example: if d.yds not d.yd

    def _update(self,dec):
        self._exp  = dec._exp
        self._sign = dec._sign
        self._int  = dec._int
        self._is_special  = dec._is_special
    def __str__(self):
        s = ''
        s += '%g meters (m)\n' % self.m
        s += '%g miles (mi)\n' % self.mi
        s += '%g yard (yd)\n' % self.yd
        s += '%g feet (ft)\n' % self.ft
        s += '%g inch (inch)\n' % self.inch
        s += '%g kilometers (km)\n' % self.km
        s += '%g centimeters (cm)\n' % self.cm
        s += '%g millimeters (mm)\n' % self.mm
        s += '%g nanometer (nm)\n' % self.nm
        return s[:-1]
    def __repr__(self):
        s = ''
        s += '%r meters (m)\n' % self.m
        s += '%r miles (mi)\n' % self.mi
        s += '%r yard (yd)\n' % self.yd
        s += '%r feet (ft)\n' % self.ft
        s += '%r inch (inch)\n' % self.inch
        s += '%r kilometers (km)\n' % self.km
        s += '%r centimeters (cm)\n' % self.cm
        s += '%r millimeters (mm)\n' % self.mm
        s += '%r nanometer (nm)\n' % self.nm
        return s[:-1]
    @property
    def m(self):
        return eval("Decimal(self)")
    @m.setter
    def m(self, value):
        eval("self._update(Decimal(value))")
    @property
    def mi(self):
        return eval("Decimal(self) * MI_IN_M")
    @mi.setter
    def mi(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/MI_IN_M)")
    @property
    def yd(self):
        return eval("Decimal(self) * YD_IN_M")
    @yd.setter
    def yd(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/YD_IN_M)")
    @property
    def ft(self):
        return eval("Decimal(self) * FT_IN_M")
    @ft.setter
    def ft(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/FT_IN_M)")
    @property
    def inch(self):
        return eval("Decimal(self) * INCH_IN_M")
    @inch.setter
    def inch(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/INCH_IN_M)")
    @property
    def km(self):
        return eval("Decimal(self) * KM_IN_M")
    @km.setter
    def km(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/KM_IN_M)")
    @property
    def cm(self):
        return eval("Decimal(self) * CM_IN_M")
    @cm.setter
    def cm(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/CM_IN_M)")
    @property
    def mm(self):
        return eval("Decimal(self) * MM_IN_M")
    @mm.setter
    def mm(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/MM_IN_M)")
    @property
    def nm(self):
        return eval("Decimal(self) * NM_IN_M")
    @nm.setter
    def nm(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/NM_IN_M)")

class Area(Decimal):
    __slots__ = ("_update",) # generate AttributeError on illegal property; example: if d.yds instead of d.ydgenerate AttributeError example: if d.yds not d.yd

    def _update(self,dec):
        self._exp  = dec._exp
        self._sign = dec._sign
        self._int  = dec._int
        self._is_special  = dec._is_special
    def __str__(self):
        s = ''
        s += '%g sq_meters (m2)\n' % self.m2
        s += '%g sq_miles (mi2)\n' % self.mi2
        s += '%g sq_yard (yd2)\n' % self.yd2
        s += '%g sq_feet (ft2)\n' % self.ft2
        s += '%g sq_inch (inch2)\n' % self.inch2
        s += '%g sq_kilometers (km2)\n' % self.km2
        s += '%g sq_centimeters (cm2)\n' % self.cm2
        s += '%g sq_millimeters (mm2)\n' % self.mm2
        return s[:-1]
    def __repr__(self):
        s = ''
        s += '%r sq_meters (m2)\n' % self.m2
        s += '%r sq_miles (mi2)\n' % self.mi2
        s += '%r sq_yard (yd2)\n' % self.yd2
        s += '%r sq_feet (ft2)\n' % self.ft2
        s += '%r sq_inch (inch2)\n' % self.inch2
        s += '%r sq_kilometers (km2)\n' % self.km2
        s += '%r sq_centimeters (cm2)\n' % self.cm2
        s += '%r sq_millimeters (mm2)\n' % self.mm2
        return s[:-1]
    @property
    def m2(self):
        return eval("Decimal(self)")
    @m2.setter
    def m2(self, value):
        eval("self._update(Decimal(value))")
    @property
    def mi2(self):
        return eval("Decimal(self) * (MI_IN_M * MI_IN_M)")
    @mi2.setter
    def mi2(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(MI_IN_M * MI_IN_M))")
    @property
    def yd2(self):
        return eval("Decimal(self) * (YD_IN_M * YD_IN_M)")
    @yd2.setter
    def yd2(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(YD_IN_M * YD_IN_M))")
    @property
    def ft2(self):
        return eval("Decimal(self) * (FT_IN_M * FT_IN_M)")
    @ft2.setter
    def ft2(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(FT_IN_M * FT_IN_M))")
    @property
    def inch2(self):
        return eval("Decimal(self) * (INCH_IN_M * INCH_IN_M)")
    @inch2.setter
    def inch2(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(INCH_IN_M * INCH_IN_M))")
    @property
    def km2(self):
        return eval("Decimal(self) * (KM_IN_M * KM_IN_M)")
    @km2.setter
    def km2(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(KM_IN_M * KM_IN_M))")
    @property
    def cm2(self):
        return eval("Decimal(self) * (CM_IN_M * CM_IN_M)")
    @cm2.setter
    def cm2(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(CM_IN_M * CM_IN_M))")
    @property
    def mm2(self):
        return eval("Decimal(self) * (MM_IN_M * MM_IN_M)")
    @mm2.setter
    def mm2(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(MM_IN_M * MM_IN_M))")

class Volumn(Decimal):
    __slots__ = ("_update",) # generate AttributeError on illegal property; example: if d.yds instead of d.ydgenerate AttributeError example: if d.yds not d.yd

    def _update(self,dec):
        self._exp  = dec._exp
        self._sign = dec._sign
        self._int  = dec._int
        self._is_special  = dec._is_special
    def __str__(self):
        s = ''
        s += '%g cubic_meters (m3)\n' % self.m3
        s += '%g cubic_miles (mi3)\n' % self.mi3
        s += '%g cubic_yard (yd3)\n' % self.yd3
        s += '%g cubic_feet (ft3)\n' % self.ft3
        s += '%g cubic_inch (inch3)\n' % self.inch3
        s += '%g cubic_kilometers (km3)\n' % self.km3
        s += '%g cubic_centimeters (cm3)\n' % self.cm3
        s += '%g cubic_millimeters (mm3)\n' % self.mm3
        return s[:-1]
    def __repr__(self):
        s = ''
        s += '%r cubic_meters (m3)\n' % self.m3
        s += '%r cubic_miles (mi3)\n' % self.mi3
        s += '%r cubic_yard (yd3)\n' % self.yd3
        s += '%r cubic_feet (ft3)\n' % self.ft3
        s += '%r cubic_inch (inch3)\n' % self.inch3
        s += '%r cubic_kilometers (km3)\n' % self.km3
        s += '%r cubic_centimeters (cm3)\n' % self.cm3
        s += '%r cubic_millimeters (mm3)\n' % self.mm3
        return s[:-1]
    @property
    def m3(self):
        return eval("Decimal(self)")
    @m3.setter
    def m3(self, value):
        eval("self._update(Decimal(value))")
    @property
    def mi3(self):
        return eval("Decimal(self) * (MI_IN_M * MI_IN_M * MI_IN_M)")
    @mi3.setter
    def mi3(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(MI_IN_M * MI_IN_M * MI_IN_M))")
    @property
    def yd3(self):
        return eval("Decimal(self) * (YD_IN_M * YD_IN_M * YD_IN_M)")
    @yd3.setter
    def yd3(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(YD_IN_M * YD_IN_M * YD_IN_M))")
    @property
    def ft3(self):
        return eval("Decimal(self) * (FT_IN_M * FT_IN_M * FT_IN_M)")
    @ft3.setter
    def ft3(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(FT_IN_M * FT_IN_M * FT_IN_M))")
    @property
    def inch3(self):
        return eval("Decimal(self) * (INCH_IN_M * INCH_IN_M * INCH_IN_M)")
    @inch3.setter
    def inch3(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(INCH_IN_M * INCH_IN_M * INCH_IN_M))")
    @property
    def km3(self):
        return eval("Decimal(self) * (KM_IN_M * KM_IN_M * KM_IN_M)")
    @km3.setter
    def km3(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(KM_IN_M * KM_IN_M * KM_IN_M))")
    @property
    def cm3(self):
        return eval("Decimal(self) * (CM_IN_M * CM_IN_M * CM_IN_M)")
    @cm3.setter
    def cm3(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(CM_IN_M * CM_IN_M * CM_IN_M))")
    @property
    def mm3(self):
        return eval("Decimal(self) * (MM_IN_M * MM_IN_M * MM_IN_M)")
    @mm3.setter
    def mm3(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(MM_IN_M * MM_IN_M * MM_IN_M))")

class Time(Decimal):
    __slots__ = ("_update",) # generate AttributeError on illegal property; example: if d.yds instead of d.ydgenerate AttributeError example: if d.yds not d.yd

    def _update(self,dec):
        self._exp  = dec._exp
        self._sign = dec._sign
        self._int  = dec._int
        self._is_special  = dec._is_special
    def __str__(self):
        s = ''
        s += '%g sec (sec)\n' % self.sec
        s += '%g min (min)\n' % self.min
        s += '%g hour (hr)\n' % self.hr
        s += '%g day (day)\n' % self.day
        s += '%g week (wk)\n' % self.wk
        s += '%g year (yr)\n' % self.yr
        return s[:-1]
    def __repr__(self):
        s = ''
        s += '%r sec (sec)\n' % self.sec
        s += '%r min (min)\n' % self.min
        s += '%r hour (hr)\n' % self.hr
        s += '%r day (day)\n' % self.day
        s += '%r week (wk)\n' % self.wk
        s += '%r year (yr)\n' % self.yr
        return s[:-1]
    @property
    def sec(self):
        return eval("Decimal(self)")
    @sec.setter
    def sec(self, value):
        eval("self._update(Decimal(value))")
    @property
    def min(self):
        return eval("Decimal(self) * Decimal('1.0')/SEC_IN_MIN")
    @min.setter
    def min(self, value):
        eval("self._update(Decimal(value) * SEC_IN_MIN)")
    @property
    def hr(self):
        return eval("Decimal(self) * Decimal('1.0')/(SEC_IN_MIN*MIN_IN_HR)")
    @hr.setter
    def hr(self, value):
        eval("self._update(Decimal(value) * (SEC_IN_MIN*MIN_IN_HR))")
    @property
    def day(self):
        return eval("Decimal(self) * Decimal('1.0')/(HR_IN_DAY*SEC_IN_MIN*MIN_IN_HR)")
    @day.setter
    def day(self, value):
        eval("self._update(Decimal(value) * (HR_IN_DAY*SEC_IN_MIN*MIN_IN_HR))")
    @property
    def wk(self):
        return eval("Decimal(self) * Decimal('1.0')/(DAY_IN_WK*HR_IN_DAY*SEC_IN_MIN*MIN_IN_HR)")
    @wk.setter
    def wk(self, value):
        eval("self._update(Decimal(value) * (DAY_IN_WK*HR_IN_DAY*SEC_IN_MIN*MIN_IN_HR))")
    @property
    def yr(self):
        return eval("Decimal(self) * Decimal('1.0')/(DAY_IN_YR*HR_IN_DAY*SEC_IN_MIN*MIN_IN_HR)")
    @yr.setter
    def yr(self, value):
        eval("self._update(Decimal(value) * (DAY_IN_YR*HR_IN_DAY*SEC_IN_MIN*MIN_IN_HR))")

class Velocity(Decimal):
    __slots__ = ("_update",) # generate AttributeError on illegal property; example: if d.yds instead of d.ydgenerate AttributeError example: if d.yds not d.yd

    def _update(self,dec):
        self._exp  = dec._exp
        self._sign = dec._sign
        self._int  = dec._int
        self._is_special  = dec._is_special
    def __str__(self):
        s = ''
        s += '%g meters_per_sec (mps)\n' % self.mps
        s += '%g miles_per_sec (mips)\n' % self.mips
        s += '%g miles_per_hr (mph)\n' % self.mph
        s += '%g ft_per_sec (fps)\n' % self.fps
        s += '%g inch_per_sec (inchps)\n' % self.inchps
        s += '%g km_per_hour (kmph)\n' % self.kmph
        s += '%g km_per_sec (kmps)\n' % self.kmps
        return s[:-1]
    def __repr__(self):
        s = ''
        s += '%r meters_per_sec (mps)\n' % self.mps
        s += '%r miles_per_sec (mips)\n' % self.mips
        s += '%r miles_per_hr (mph)\n' % self.mph
        s += '%r ft_per_sec (fps)\n' % self.fps
        s += '%r inch_per_sec (inchps)\n' % self.inchps
        s += '%r km_per_hour (kmph)\n' % self.kmph
        s += '%r km_per_sec (kmps)\n' % self.kmps
        return s[:-1]
    @property
    def mps(self):
        return eval("Decimal(self)")
    @mps.setter
    def mps(self, value):
        eval("self._update(Decimal(value))")
    @property
    def mips(self):
        return eval("Decimal(self) * MI_IN_M")
    @mips.setter
    def mips(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/MI_IN_M)")
    @property
    def mph(self):
        return eval("Decimal(self) * (MI_IN_M * SEC_IN_MIN * MIN_IN_HR)")
    @mph.setter
    def mph(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(MI_IN_M * SEC_IN_MIN * MIN_IN_HR))")
    @property
    def fps(self):
        return eval("Decimal(self) * FT_IN_M")
    @fps.setter
    def fps(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/FT_IN_M)")
    @property
    def inchps(self):
        return eval("Decimal(self) * INCH_IN_M")
    @inchps.setter
    def inchps(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/INCH_IN_M)")
    @property
    def kmph(self):
        return eval("Decimal(self) * (KM_IN_M * SEC_IN_MIN * MIN_IN_HR)")
    @kmph.setter
    def kmph(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(KM_IN_M * SEC_IN_MIN * MIN_IN_HR))")
    @property
    def kmps(self):
        return eval("Decimal(self) * KM_IN_M")
    @kmps.setter
    def kmps(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/KM_IN_M)")

class Acceleration(Decimal):
    __slots__ = ("_update",) # generate AttributeError on illegal property; example: if d.yds instead of d.ydgenerate AttributeError example: if d.yds not d.yd

    def _update(self,dec):
        self._exp  = dec._exp
        self._sign = dec._sign
        self._int  = dec._int
        self._is_special  = dec._is_special
    def __str__(self):
        s = ''
        s += '%g meters_per_sq_sec (mps2)\n' % self.mps2
        s += '%g miles_per_sq_sec (mips2)\n' % self.mips2
        s += '%g miles_per_hr_per_sec (mphps)\n' % self.mphps
        s += '%g ft_per_sq_sec (fps2)\n' % self.fps2
        s += '%g inch_per_sq_sec (ips2)\n' % self.ips2
        s += '%g km_per_hour_per_sec (kmphps)\n' % self.kmphps
        s += '%g km_per_sq_sec (kmps2)\n' % self.kmps2
        return s[:-1]
    def __repr__(self):
        s = ''
        s += '%r meters_per_sq_sec (mps2)\n' % self.mps2
        s += '%r miles_per_sq_sec (mips2)\n' % self.mips2
        s += '%r miles_per_hr_per_sec (mphps)\n' % self.mphps
        s += '%r ft_per_sq_sec (fps2)\n' % self.fps2
        s += '%r inch_per_sq_sec (ips2)\n' % self.ips2
        s += '%r km_per_hour_per_sec (kmphps)\n' % self.kmphps
        s += '%r km_per_sq_sec (kmps2)\n' % self.kmps2
        return s[:-1]
    @property
    def mps2(self):
        return eval("Decimal(self)")
    @mps2.setter
    def mps2(self, value):
        eval("self._update(Decimal(value))")
    @property
    def mips2(self):
        return eval("Decimal(self) * MI_IN_M")
    @mips2.setter
    def mips2(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/MI_IN_M)")
    @property
    def mphps(self):
        return eval("Decimal(self) * (MI_IN_M * SEC_IN_MIN * MIN_IN_HR)")
    @mphps.setter
    def mphps(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(MI_IN_M * SEC_IN_MIN * MIN_IN_HR))")
    @property
    def fps2(self):
        return eval("Decimal(self) * FT_IN_M")
    @fps2.setter
    def fps2(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/FT_IN_M)")
    @property
    def ips2(self):
        return eval("Decimal(self) * INCH_IN_M")
    @ips2.setter
    def ips2(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/INCH_IN_M)")
    @property
    def kmphps(self):
        return eval("Decimal(self) * (KM_IN_M * SEC_IN_MIN * MIN_IN_HR)")
    @kmphps.setter
    def kmphps(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/(KM_IN_M * SEC_IN_MIN * MIN_IN_HR))")
    @property
    def kmps2(self):
        return eval("Decimal(self) * KM_IN_M")
    @kmps2.setter
    def kmps2(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0')/KM_IN_M)")

class Mass(Decimal):
    __slots__ = ("_update",) # generate AttributeError on illegal property; example: if d.yds instead of d.ydgenerate AttributeError example: if d.yds not d.yd

    def _update(self,dec):
        self._exp  = dec._exp
        self._sign = dec._sign
        self._int  = dec._int
        self._is_special  = dec._is_special
    def __str__(self):
        s = ''
        s += '%g kilogram (kg)\n' % self.kg
        s += '%g gram (g)\n' % self.g
        s += '%g ounce (oz)\n' % self.oz
        s += '%g pounds (lbm)\n' % self.lbm
        return s[:-1]
    def __repr__(self):
        s = ''
        s += '%r kilogram (kg)\n' % self.kg
        s += '%r gram (g)\n' % self.g
        s += '%r ounce (oz)\n' % self.oz
        s += '%r pounds (lbm)\n' % self.lbm
        return s[:-1]
    @property
    def kg(self):
        return eval("Decimal(self)")
    @kg.setter
    def kg(self, value):
        eval("self._update(Decimal(value))")
    @property
    def g(self):
        return eval("Decimal(self) * Decimal('1000.0')")
    @g.setter
    def g(self, value):
        eval("self._update(Decimal(value) / Decimal('1000.0'))")
    @property
    def oz(self):
        return eval("Decimal(self) * OZ_IN_G * Decimal('1000.0')")
    @oz.setter
    def oz(self, value):
        eval("self._update(Decimal(value) / OZ_IN_G / Decimal('1000.0'))")
    @property
    def lbm(self):
        return eval("Decimal(self) * (OZ_IN_G / OZ_IN_LB) * Decimal('1000.0')")
    @lbm.setter
    def lbm(self, value):
        eval("self._update(Decimal(value)* OZ_IN_LB / OZ_IN_G / Decimal('1000.0') )")

class Force(Decimal):
    __slots__ = ("_update",) # generate AttributeError on illegal property; example: if d.yds instead of d.ydgenerate AttributeError example: if d.yds not d.yd

    def _update(self,dec):
        self._exp  = dec._exp
        self._sign = dec._sign
        self._int  = dec._int
        self._is_special  = dec._is_special
    def __str__(self):
        s = ''
        s += '%g newton (N)\n' % self.N
        s += '%g kilogram-force (kgf)\n' % self.kgf
        s += '%g dyne (dyn)\n' % self.dyn
        s += '%g pound-force (lbf)\n' % self.lbf
        return s[:-1]
    def __repr__(self):
        s = ''
        s += '%r newton (N)\n' % self.N
        s += '%r kilogram-force (kgf)\n' % self.kgf
        s += '%r dyne (dyn)\n' % self.dyn
        s += '%r pound-force (lbf)\n' % self.lbf
        return s[:-1]
    @property
    def N(self):
        return eval("Decimal(self)")
    @N.setter
    def N(self, value):
        eval("self._update(Decimal(value))")
    @property
    def kgf(self):
        return eval("Decimal(self) / GRAVITY")
    @kgf.setter
    def kgf(self, value):
        eval("self._update(Decimal(value) * GRAVITY)")
    @property
    def dyn(self):
        return eval("Decimal(self) * Decimal('100000.0')")
    @dyn.setter
    def dyn(self, value):
        eval("self._update(Decimal(value) / Decimal('100000.0'))")
    @property
    def lbf(self):
        return eval("Decimal(self) * (G_IN_KG * OZ_IN_G) / (OZ_IN_LB*GRAVITY)")
    @lbf.setter
    def lbf(self, value):
        eval("self._update(Decimal(value) * (OZ_IN_LB * GRAVITY) / (G_IN_KG * OZ_IN_G))")

class Weight(Decimal):
    __slots__ = ("_update",) # generate AttributeError on illegal property; example: if d.yds instead of d.ydgenerate AttributeError example: if d.yds not d.yd

    def _update(self,dec):
        self._exp  = dec._exp
        self._sign = dec._sign
        self._int  = dec._int
        self._is_special  = dec._is_special
    def __str__(self):
        s = ''
        s += '%g kilogram (kg)\n' % self.kg
        s += '%g gram (g)\n' % self.g
        s += '%g ounce (oz)\n' % self.oz
        s += '%g pounds (lbm)\n' % self.lbm
        return s[:-1]
    def __repr__(self):
        s = ''
        s += '%r kilogram (kg)\n' % self.kg
        s += '%r gram (g)\n' % self.g
        s += '%r ounce (oz)\n' % self.oz
        s += '%r pounds (lbm)\n' % self.lbm
        return s[:-1]
    @property
    def kg(self):
        return eval("Decimal(self)")
    @kg.setter
    def kg(self, value):
        eval("self._update(Decimal(value))")
    @property
    def g(self):
        return eval("Decimal(self) * G_IN_KG ")
    @g.setter
    def g(self, value):
        eval("self._update(Decimal(value) / G_IN_KG)")
    @property
    def oz(self):
        return eval("Decimal(self) * G_IN_KG * OZ_IN_G ")
    @oz.setter
    def oz(self, value):
        eval("self._update(Decimal(value) / (G_IN_KG * OZ_IN_G))")
    @property
    def lbm(self):
        return eval("Decimal(self) * (G_IN_KG * OZ_IN_G) / (OZ_IN_LB)")
    @lbm.setter
    def lbm(self, value):
        eval("self._update(Decimal(value) * (OZ_IN_LB ) / (G_IN_KG * OZ_IN_G))")

class Pressure(Decimal):
    __slots__ = ("_update",) # generate AttributeError on illegal property; example: if d.yds instead of d.ydgenerate AttributeError example: if d.yds not d.yd

    def _update(self,dec):
        self._exp  = dec._exp
        self._sign = dec._sign
        self._int  = dec._int
        self._is_special  = dec._is_special
    def __str__(self):
        s = ''
        s += '%g pascal (Pa)\n' % self.Pa
        s += '%g newton_per_sq_m (Nm2)\n' % self.Nm2
        s += '%g kilogram_per_sq_m (kgfpm2)\n' % self.kgfpm2
        s += '%g pound_per_sq_inch (psi)\n' % self.psi
        s += '%g pound_per_sq_ft (psf)\n' % self.psf
        return s[:-1]
    def __repr__(self):
        s = ''
        s += '%r pascal (Pa)\n' % self.Pa
        s += '%r newton_per_sq_m (Nm2)\n' % self.Nm2
        s += '%r kilogram_per_sq_m (kgfpm2)\n' % self.kgfpm2
        s += '%r pound_per_sq_inch (psi)\n' % self.psi
        s += '%r pound_per_sq_ft (psf)\n' % self.psf
        return s[:-1]
    @property
    def Pa(self):
        return eval("Decimal(self)")
    @Pa.setter
    def Pa(self, value):
        eval("self._update(Decimal(value))")
    @property
    def Nm2(self):
        return eval("Decimal(self)")
    @Nm2.setter
    def Nm2(self, value):
        eval("self._update(Decimal(value))")
    @property
    def kgfpm2(self):
        return eval("Decimal(self) * Decimal('1.0')/GRAVITY")
    @kgfpm2.setter
    def kgfpm2(self, value):
        eval("self._update(Decimal(value) * GRAVITY)")
    @property
    def psi(self):
        return eval("Decimal(self) * (LB_IN_NEWTON/(INCH_IN_M * INCH_IN_M))")
    @psi.setter
    def psi(self, value):
        eval("self._update(Decimal(value) * (INCH_IN_M * INCH_IN_M) / LB_IN_NEWTON)")
    @property
    def psf(self):
        return eval("Decimal(self) * LB_IN_NEWTON/(FT_IN_M * FT_IN_M)")
    @psf.setter
    def psf(self, value):
        eval("self._update(Decimal(value) * (FT_IN_M * FT_IN_M) / LB_IN_NEWTON)")

class Frequency(Decimal):
    __slots__ = ("_update",) # generate AttributeError on illegal property; example: if d.yds instead of d.ydgenerate AttributeError example: if d.yds not d.yd

    def _update(self,dec):
        self._exp  = dec._exp
        self._sign = dec._sign
        self._int  = dec._int
        self._is_special  = dec._is_special
    def __str__(self):
        s = ''
        s += '%g hertz (Hz)\n' % self.Hz
        s += '%g KHz (KHz)\n' % self.KHz
        s += '%g MHz (MHz)\n' % self.MHz
        s += '%g GHz (GHz)\n' % self.GHz
        return s[:-1]
    def __repr__(self):
        s = ''
        s += '%r hertz (Hz)\n' % self.Hz
        s += '%r KHz (KHz)\n' % self.KHz
        s += '%r MHz (MHz)\n' % self.MHz
        s += '%r GHz (GHz)\n' % self.GHz
        return s[:-1]
    @property
    def Hz(self):
        return eval("Decimal(self)")
    @Hz.setter
    def Hz(self, value):
        eval("self._update(Decimal(value))")
    @property
    def KHz(self):
        return eval("Decimal(self) * Decimal('1.0')/Decimal(1.0e3)")
    @KHz.setter
    def KHz(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0e3'))")
    @property
    def MHz(self):
        return eval("Decimal(self) * Decimal('1.0')/Decimal(1.0e6)")
    @MHz.setter
    def MHz(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0e6'))")
    @property
    def GHz(self):
        return eval("Decimal(self) * Decimal('1.0')/Decimal(1.0e9)")
    @GHz.setter
    def GHz(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0e9'))")

class Power(Decimal):
    __slots__ = ("_update",) # generate AttributeError on illegal property; example: if d.yds instead of d.ydgenerate AttributeError example: if d.yds not d.yd

    def _update(self,dec):
        self._exp  = dec._exp
        self._sign = dec._sign
        self._int  = dec._int
        self._is_special  = dec._is_special
    def __str__(self):
        s = ''
        s += '%g watts (W)\n' % self.W
        s += '%g kilowatt (KW)\n' % self.KW
        s += '%g megawatt (MW)\n' % self.MW
        s += '%g Horsepower (hp)\n' % self.hp
        s += '%g joulepersec (jps)\n' % self.jps
        return s[:-1]
    def __repr__(self):
        s = ''
        s += '%r watts (W)\n' % self.W
        s += '%r kilowatt (KW)\n' % self.KW
        s += '%r megawatt (MW)\n' % self.MW
        s += '%r Horsepower (hp)\n' % self.hp
        s += '%r joulepersec (jps)\n' % self.jps
        return s[:-1]
    @property
    def W(self):
        return eval("Decimal(self)")
    @W.setter
    def W(self, value):
        eval("self._update(Decimal(value))")
    @property
    def KW(self):
        return eval("Decimal(self) * Decimal('1.0')/Decimal('1.0e3')")
    @KW.setter
    def KW(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0e3'))")
    @property
    def MW(self):
        return eval("Decimal(self) * Decimal('1.0')/Decimal('1.0e6')")
    @MW.setter
    def MW(self, value):
        eval("self._update(Decimal(value) * Decimal('1.0e6'))")
    @property
    def hp(self):
        return eval("Decimal(self) * Decimal('1.0')/W_IN_HP")
    @hp.setter
    def hp(self, value):
        eval("self._update(Decimal(value) * W_IN_HP)")
    @property
    def jps(self):
        return eval("Decimal(self)")
    @jps.setter
    def jps(self, value):
        eval("self._update(Decimal(value))")

class Temperature(Decimal):
    __slots__ = ("_update",) # generate AttributeError on illegal property; example: if d.yds instead of d.ydgenerate AttributeError example: if d.yds not d.yd

    def _update(self,dec):
        self._exp  = dec._exp
        self._sign = dec._sign
        self._int  = dec._int
        self._is_special  = dec._is_special
    def __str__(self):
        s = ''
        s += '%g Kelvin (K)\n' % self.K
        s += '%g Fahrenheit (F)\n' % self.F
        s += '%g Celsius (C)\n' % self.C
        return s[:-1]
    def __repr__(self):
        s = ''
        s += '%r Kelvin (K)\n' % self.K
        s += '%r Fahrenheit (F)\n' % self.F
        s += '%r Celsius (C)\n' % self.C
        return s[:-1]
    @property
    def K(self):
        return eval("Decimal(self)")
    @K.setter
    def K(self, value):
        eval("self._update(Decimal(value))")
    @property
    def F(self):
        return eval("((Decimal(self) - Decimal('273.15')) * Decimal('9.0')/Decimal('5.0')) + Decimal('32.0')")
    @F.setter
    def F(self, value):
        eval("self._update((Decimal(value) - Decimal('32.0')) * (Decimal('5.0')/Decimal('9.0')) + Decimal('273.15'))")
    @property
    def C(self):
        return eval("Decimal(self) - Decimal('273.15')")
    @C.setter
    def C(self, value):
        eval("self._update(Decimal(value) + Decimal('273.15'))")

def test():
    "test method tests examples and testfile"
    print '\n**** conversion test ****\n'
    import doctest
    import conversion

    doctest.testmod(conversion, verbose=True, report=True)
    print doctest.master.summarize()

    doctest.testfile('conversionTest.txt', verbose=True, report=True)
    print doctest.master.summarize()
    
if __name__ == '__main__':
    test()

